/*
 * Simply Bank
 *
 * TP Webservices : Application Bancaire Simplifiée
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Création d&#39;un utilisateur
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="body">Created user object</param>
        /// <response code="200">Utilisateur Créé</response>
        /// <response code="400">Un des champs renseignés n&#39;est pas valide.</response>
        [HttpPost]
        [Route("/v2/user")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Utilisateur Créé")]
        public virtual IActionResult CreateUser([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "<null>\n  <accountNumber>123</accountNumber>\n  <pin>123</pin>\n</null>";
            exampleJson = "{\n  \"pin\" : 6,\n  \"accountNumber\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            : default(InlineResponse200);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Connexion
        /// </summary>
        
        /// <param name="numroDeCompte">Numéro de compte</param>
        /// <param name="codePin_">Code Pin</param>
        /// <response code="200">Connexion Réussie</response>
        /// <response code="400">Numéro de Compte / Code Pin Invalides</response>
        [HttpGet]
        [Route("/v2/user/login")]
        [ValidateModelState]
        [SwaggerOperation("LoginUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Connexion Réussie")]
        public virtual IActionResult LoginUser([FromQuery][Required()]string numroDeCompte, [FromQuery][Required()]string codePin_)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "aeiou";
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Déconnexion
        /// </summary>
        
        /// <response code="0">Vous êtes déconnecté</response>
        [HttpGet]
        [Route("/v2/user/logout")]
        [ValidateModelState]
        [SwaggerOperation("LogoutUser")]
        public virtual IActionResult LogoutUser()
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Opérations de dépôt et de retrait d&#39;argent
        /// </summary>
        /// <remarks>L&#39;utilisateur peut déposer ou retirer de l&#39;argent</remarks>
        /// <param name="accountNumber">Numéro de compte.</param>
        /// <param name="date">Date de l&#39;opération.</param>
        /// <param name="amount">Montant de l&#39;opération.</param>
        /// <param name="type">Type de l&#39;opération</param>
        /// <response code="200">Opération effectuée</response>
        /// <response code="400">Opération impossible</response>
        [HttpPost]
        [Route("/v2/user/depot")]
        [ValidateModelState]
        [SwaggerOperation("Money")]
        public virtual IActionResult Money([FromQuery][Required()]string accountNumber, [FromQuery][Required()]string date, [FromQuery][Required()]int? amount, [FromQuery][Required()]string type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }
    }
}
